server:
  # start services on random port by default
#  port: 8083
  # The stop processing uses a timeout which provides a grace period during which existing requests will be allowed to complete but no new requests will be permitted
  shutdown: graceful

spring:
  application:
    name: petclinicvetsservice

  cache:
    cache-names: vets
  sql:
    init:
      schema-locations: classpath*:db/hsqldb/schema.sql
      data-locations: classpath*:db/hsqldb/data.sql
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: none

panda-client:
  default-scope: petclinic

# Metrics
management:
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
  tracing:

    sampling:
      probability: 1.0
  endpoints.web.exposure.include: '*'
  metrics:
    distribution:
      percentiles-histogram:
        'http.server.requests': true
#      slo:
#        'http.server.requests':
#          - 10ms
#          - 200ms
#          - 500ms
#          - 1s

jarjar:
  info:
    appId: ${spring.application.name}
    version: 2.6.7-SNAPSHOT
  requestid:
    create-if-missing:
      urls: /**
  security:
    web:
      explicit-access-required:
        enabled: false
      chain:
        auth:
          csrf:
            enabled: false
      headers:
        content-security-policy:
          required: false
        x-content-type-options:
          value: nosniff
vets:
  cache:
    ttl: 60
    heap-size: 100

# Logging
# traceId and spanId are predefined MDC keys - we want the logs to include them
logging:
  pattern.level: '%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]'
  level:
    org.springframework: INFO
    org.springframework.samples.petclinic: DEBUG
    com.ocadotechnology.jarjar.edgerouter: INFO
    io.opentelemetry.exporter.otlp: DEBUG
